openapi: 3.0.3
info:
  title: Geolocation API
  version: 1.0.0
  description: The aim of this project is to build an API that requires JWT authorization.
    The application should be able to store geolocation data in the database, based
    on IP address or URL. The API should be able to add, delete or provide geolocation
    data on the base of ip address or URL
paths:
  /api/geolocations/:
    get:
      operationId: geolocations_list
      description: Returns a list of geocoded addresses
      tags:
      - geolocations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GeolocationRequest'
          description: ''
    post:
      operationId: geolocations_create
      description: Geocodes given IP or URL address
      tags:
      - geolocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeolocationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GeolocationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GeolocationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeolocationRequest'
          description: ''
  /api/geolocations/{id}/:
    get:
      operationId: geolocations_retrieve
      description: Retrieves details of a geocoded address
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - geolocations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeolocationRequest'
          description: ''
    delete:
      operationId: geolocations_destroy
      description: Destroys a geocoded address
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - geolocations
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    post:
      operationId: users_create
      description: Creates a new user account
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Signup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
          description: ''
components:
  schemas:
    Geolocation:
      type: object
      properties:
        ip:
          type: string
        type:
          type: string
          maxLength: 4
        continentCode:
          type: string
          maxLength: 2
        continentName:
          type: string
          maxLength: 20
        countryCode:
          type: string
          maxLength: 2
        countryName:
          type: string
          maxLength: 50
        regionCode:
          type: string
          maxLength: 5
        regionName:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 50
        zip:
          type: string
          maxLength: 10
        latitude:
          type: string
          format: decimal
          pattern: ^\d{0,2}(?:\.\d{0,18})?$
          nullable: true
        longitude:
          type: string
          format: decimal
          pattern: ^\d{0,3}(?:\.\d{0,17})?$
          nullable: true
      required:
      - ip
      - type
    GeolocationRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        lookup:
          type: string
          maxLength: 100
        createdAt:
          type: string
          format: date-time
          readOnly: true
        geolocation:
          allOf:
          - $ref: '#/components/schemas/Geolocation'
          readOnly: true
      required:
      - createdAt
      - geolocation
      - id
      - lookup
    Signup:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        firstName:
          type: string
          maxLength: 150
        lastName:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - email
      - firstName
      - lastName
      - password
      - username
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
